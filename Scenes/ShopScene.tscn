[gd_scene load_steps=5 format=3 uid="uid://e1kqpuwy4f15"]

[ext_resource type="Theme" uid="uid://b0y0a3w6ab13e" path="res://Assets/ui_font.tres" id="1_x7s06"]
[ext_resource type="Shortcut" uid="uid://c2biw5174i2sc" path="res://Shortcuts/EscapeKey.tres" id="2_s85eg"]

[sub_resource type="GDScript" id="GDScript_x7s06"]
script/source = "extends Control

@onready var shop_script = %Shop
@onready var items_container = %ItemContainer
@onready var back_button = %BackButton
@onready var currency_label = %CurrencyLabel


# Called when the node enters the scene tree for the first time.
func _ready():
	back_button.pressed.connect(_on_BackButton_pressed)
	
	# Configure GridContainer
	items_container.columns = 3
	items_container.size_flags_horizontal = Control.SIZE_EXPAND_FILL
	items_container.size_flags_vertical = Control.SIZE_EXPAND_FILL
	
	# Load items
	var items = shop_script.load_shop_items()
	
	for item_data in items:
		var item_name = item_data.get_display_name()
		var internal_name = item_data.get_internal_name()
		var cost = item_data.get_cost()
		var texture = item_data.get_texture()
		var boosts = item_data.get_boosts()
		var owned_quantity = PlayerManager.check_inventory_for_resource(internal_name)
		
		# Create item card container
		var card = VBoxContainer.new()
		card.alignment = BoxContainer.ALIGNMENT_CENTER
		card.size_flags_horizontal = Control.SIZE_EXPAND_FILL
		card.size_flags_vertical = Control.SIZE_SHRINK_BEGIN
		card.add_theme_constant_override(\"separation\", 8)
		card.custom_minimum_size = Vector2(200, 250)  # Ensures consistent sizing
		
		# Add texture
		var sprite = TextureRect.new()
		sprite.expand_mode = TextureRect.EXPAND_IGNORE_SIZE
		sprite.texture = texture
		sprite.custom_minimum_size = Vector2(64, 64)
		sprite.stretch_mode = TextureRect.STRETCH_KEEP_ASPECT_CENTERED
		card.add_child(sprite)
		
		# Add name and cost
		var name_cost_label = Label.new()
		name_cost_label.text = \"%s\\nCost: %d\" % [item_name, cost]
		name_cost_label.horizontal_alignment = HORIZONTAL_ALIGNMENT_CENTER
		name_cost_label.vertical_alignment = VERTICAL_ALIGNMENT_CENTER
		name_cost_label.autowrap_mode = TextServer.AUTOWRAP_WORD
		card.add_child(name_cost_label)
		
		# Add owned quantity
		var owned_label = Label.new()
		owned_label.text = \"Owned: %d\" % owned_quantity
		owned_label.horizontal_alignment = HORIZONTAL_ALIGNMENT_CENTER
		owned_label.add_theme_color_override(\"font_color\", Color(0.8, 0.8, 0.8))
		card.add_child(owned_label)
		
		# Add boost information
		if boosts.size() > 0:
			var boost_container = VBoxContainer.new()
			boost_container.add_theme_constant_override(\"separation\", 2)
			
			for boost_type in boosts:
				var boost_label = Label.new()
				boost_label.text = \"%s: +%s\" % [boost_type, boosts[boost_type]]
				boost_label.horizontal_alignment = HORIZONTAL_ALIGNMENT_CENTER
				boost_label.add_theme_color_override(\"font_color\", Color(0.5, 1.0, 0.5))
				boost_container.add_child(boost_label)
			
			card.add_child(boost_container)
		
		# Add buy button
		var buy_button = Button.new()
		buy_button.text = \"Buy\"
		buy_button.size_flags_horizontal = Control.SIZE_EXPAND_FILL
		buy_button.set_meta(\"item_data\", item_data)
		buy_button.set_meta(\"owned_label\", owned_label)  # Store reference for updates
		buy_button.pressed.connect(_on_BuyButton_pressed.bind(buy_button))
		card.add_child(buy_button)
		
		items_container.add_child(card)

		

func format_boosts(boosts: Dictionary) -> String:
	if boosts.is_empty():
		return \"No boosts\"
	
	var parts = []
	for boost in boosts:
		parts.append(\"%s: %+d\" % [boost.capitalize(), boosts[boost]])
	return \"\\n\".join(parts)

func _process(delta: float) -> void:
	currency_label.text = \"Coins: \" + str(PlayerManager.currency)

func _on_BackButton_pressed():
	NavigationManager.go_back()

func _on_BuyButton_pressed(button: Button):
	var item_data :ResourceInterface= button.get_meta(\"item_data\")
	
	if shop_script.buy(item_data):
		# Update owned quantity display
		var owned_label = button.get_meta(\"owned_label\")
		var new_quantity = PlayerManager.check_inventory_for_resource(item_data.get_internal_name())
		owned_label.text = \"Owned: %d\" % new_quantity

	else:
		# Show purchase error (e.g., not enough currency)
		print(\"Purchase failed for \", item_data.get_display_name())
"

[sub_resource type="GDScript" id="GDScript_ymdee"]
script/source = "extends Node

\"\"\"
Shop.gd

Script handling the shop's inventory and buy/sell logic.
\"\"\"
var shop_items: Array[ResourceInterface] = []
const SELL_COST_MODIFIER = 0.5

func _ready():
	var inventory := DatabaseManager.get_shop_inventory()
	
	for i in inventory.size():
		var item_path = inventory[i][\"path\"]
		var item = load(item_path) as ResourceInterface
		shop_items.append(item)

func load_shop_items() -> Array[ResourceInterface]:
	return shop_items

func buy(item_data: ResourceInterface) -> bool:
	\"\"\"
	Attempts to buy an item for the player.
	Returns true if purchase succeeded, false otherwise.
	\"\"\"
	var cost = item_data.get_cost()
	var name = item_data.get_internal_name()
	
	# Check if player has enough currency
	if PlayerManager.remove_currency(cost):
		PlayerManager.add_item(name, 1)
		return true
	else:
		return false

func sell(item_data: ResourceInterface) -> bool:
	\"\"\"
	Optional method to sell an item. 
	\"\"\"
	var cost = item_data.get_cost()
	var name = item_data.get_internal_name()
	
	# Check if player has the item
	if PlayerManager.remove_item(name, 1):
		# Give back some money (could be partial or full cost)
		PlayerManager.add_currency(int(cost * SELL_COST_MODIFIER))
		return true
	else:
		return false
"

[node name="ShopScene" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = 1.0
offset_top = 1.0
offset_bottom = 2.0
grow_horizontal = 2
grow_vertical = 2
size_flags_horizontal = 3
size_flags_vertical = 3
script = SubResource("GDScript_x7s06")

[node name="Shop" type="Node" parent="."]
unique_name_in_owner = true
script = SubResource("GDScript_ymdee")

[node name="CurrencyLabel" type="Label" parent="."]
unique_name_in_owner = true
layout_mode = 2
offset_left = -1.0
offset_top = 7.0
offset_right = 1150.0
offset_bottom = 63.0

[node name="BackButton" type="Button" parent="."]
unique_name_in_owner = true
layout_mode = 2
offset_top = 615.0
offset_right = 1151.0
offset_bottom = 643.0
scale = Vector2(1, 1.15999)
size_flags_vertical = 8
shortcut = ExtResource("2_s85eg")
text = "Back..."

[node name="ScrollContainer" type="ScrollContainer" parent="."]
unique_name_in_owner = true
layout_mode = 0
offset_top = 63.0
offset_right = 1151.0
offset_bottom = 615.0
horizontal_scroll_mode = 0

[node name="ItemContainer" type="GridContainer" parent="ScrollContainer"]
unique_name_in_owner = true
layout_mode = 2
size_flags_vertical = 3
theme = ExtResource("1_x7s06")
columns = 3
